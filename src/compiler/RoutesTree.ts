import { createStreaming } from "https://deno.land/x/dprint@0.2.0/mod.ts";
import { path } from "../deps.ts";
import { RouteFile } from "./RouteFile.ts";
const pathMod = path;

// Setup Formatter
const tsFormatter = await createStreaming(
  fetch("https://plugins.dprint.dev/typescript-0.74.0.wasm")
);
tsFormatter.setConfig({ indentWidth: 2, lineWidth: 80 }, { semiColons: "asi" });

export class RoutesTree {
  children = new Set<RoutesTree>();
  readonly dirname: string;

  constructor(
    readonly path: string,
    readonly filePath: string,
    public routeFile: RouteFile | null,
    readonly isRoot: boolean = false
  ) {
    this.dirname = pathMod.dirname(filePath);
  }

  addChild(route: RoutesTree) {
    this.children.add(route);

    return this;
  }

  generateMatcher(): string {
    return this.isRoot ? "true" : `req.pathname === "${this.path}"`;
  }

  generateImports(): string {
    if (this.routeFile) this.routeFile.outPath = this.filePath;

    const routeImports = this.routeFile
      ? Array.from(this.routeFile.imports)
          .map(
            ([im, pth]) =>
              `import ${im} from "${this.routeFile?.resolveImport(pth)}"`
          )
          .join(";\n")
      : "";

    const childrenImports = Array.from(this.children)
      .map((child, i) => {
        return `import $child$${i} from "./${path.relative(
          this.dirname,
          child.filePath
        )}"`;
      })
      .join(";\n");

    return `import * as $Dusky$ from "dusky";
${routeImports}
${childrenImports}`;
  }

  buildFile(): string {
    const content = `
// ${path.relative(Deno.cwd(), this.filePath)}
// THIS FILE WAS GENERATED BY DUSKY-BACKEND (by Apika Luca)
${this.generateImports()}

async function handler(req: $Dusky$.HTTPRequest) {
  if (${this.generateMatcher()}) {
    ${
      this.routeFile
        ? Array.from(this.routeFile.handlers.entries())
            .map(([method, handl]) => {
              return method !== "ANY"
                ? `if (req.method === "${method}") {
        ${handl.body}
      }`
                : handl.body;
            })
            .join("\n") +
          "\n\nreturn new $Dusky$.HTTPError($Dusky$.StatusCode.NOT_METHOD)"
        : ""
    }
  }
}

export default handler;
`;

    return tsFormatter.formatText(this.filePath, content);
  }
}
