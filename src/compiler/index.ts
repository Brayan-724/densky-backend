import { ChalkInstance } from "https://deno.land/x/chalk_deno@v4.1.1-deno/index.d.ts";
import { chalk } from "../chalk.ts";
import { fs, path as pathMod } from "../deps.ts";
import { RouteFile } from "./RouteFile.ts";
import { RoutesTree } from "./RoutesTree.ts";

export type CompileOptions = {
  routesPath: string;
  outDir?: string;
  verbose?: boolean;
};

const makeLog = (verbose: boolean, rawStr: string, color: ChalkInstance) => {
  return verbose
    ? (...data: unknown[]) =>
        console.log(
          color(rawStr),
          ...data.map((v) =>
            typeof v === "string"
              ? v.replaceAll("\n", "\n" + " ".repeat(rawStr.length + 1))
              : v
          )
        )
    : (..._: unknown[]) => {};
};

export async function compile(options: CompileOptions) {
  const opts: Required<CompileOptions> = Object.assign(
    {
      routesPath: "",
      outDir: "",
      verbose: false,
    },
    options
  );

  opts.routesPath = new URL(opts.routesPath).pathname;
  opts.outDir = new URL(opts.outDir).pathname;

  const log_info = makeLog(opts.verbose, "[INFO]", chalk.cyan);
  const log_success_v = makeLog(opts.verbose, "[INFO] ", chalk.green);
  const log_success = makeLog(true, "", chalk.green);
  const log_error = makeLog(true, "[ERROR]", chalk.red);
  const log_warn = makeLog(true, "[WARN]", chalk.yellow);

  log_info(chalk`Options: 
  RoutesPath: {green "${opts.routesPath}"}
  OutDir: {green "${opts.outDir}"}
  Verbose: {yellow ${opts.verbose}}`);

  log_info("Prompting permissions");

  {
    const request = async (desc: Deno.PermissionDescriptor, txt: string) => {
      switch ((await Deno.permissions.request(desc)).state) {
        case "granted":
          log_success_v(txt);
          return true;

        case "denied":
          log_error(txt);
          return false;
      }
    };

    const read = (path: string) =>
      request(
        {
          name: "read",
          path: path,
        },
        chalk`Read permission {dim (${path})}`
      );

    const write = (path: string) =>
      request(
        {
          name: "write",
          path: path,
        },
        chalk`Write permission {dim (${path})}`
      );

    if (!(await read(opts.routesPath))) return;
    if (!(await read(opts.outDir))) return;
    if (!(await write(opts.outDir))) return;
  }

  log_success("Granted permissions");

  log_info("Scanning files");
  const files = new Map<string, RouteFile>();

  const glob = fs.expandGlob("**/*.ts", {
    root: opts.routesPath,
    globstar: true,
  });

  for await (const file of glob) {
    if (!file.isFile) return;

    const relPath = pathMod.relative(opts.routesPath, file.path);

    if (files.has(relPath)) {
      log_error(`Strange file overlapping with ${file.path}`);
      return;
    }

    const routeFile = new RouteFile(
      file.path,
      pathMod.join(opts.outDir, relPath)
    );

    try {
      routeFile.setFileContent(await Deno.readTextFile(file.path));
    } catch (e) {
      log_warn("(Ignored) " + (e as Error).message);
      continue;
    }

    files.set(relPath.slice(0, -3), routeFile);
  }

  log_success_v("Files count:", files.size);

  console.log(files);

  const fileRoutesTree = new RoutesTree(
    "/",
    pathMod.join(opts.outDir, "index.ts"),
    null,
    true
  );

  for (const [path, file] of files) {
    if (path === "index") {
      fileRoutesTree.routeFile = file;
      continue;
    }

    const routeTree = new RoutesTree(path, file.outPath, file);
    fileRoutesTree.addChild(routeTree);
    await fs.ensureFile(file.outPath);
    await Deno.writeTextFile(file.outPath, routeTree.buildFile());
  }

  await Deno.writeTextFile(fileRoutesTree.filePath, fileRoutesTree.buildFile());

  {
    // dusky.main.ts
    await fs.ensureFile(pathMod.join(opts.outDir, "dusky.main.ts"));
    await Deno.writeTextFile(
      pathMod.join(opts.outDir, "dusky.main.ts"),
      `// THIS FILE WAS GENERATED BY DUSKY-BACKEND (By Apika Luca)
import { HTTPRequest, HTTPError } from "dusky";
import { StatusCode } from "dusky/common.ts";
import mainHandler from "./index.ts";

export default async function requestHandler(req: Deno.RequestEvent, conn: Deno.Conn): Promise<Response> {
  return mainHandler(new HTTPRequest(req)) ?? new HTTPError(StatusCode.NOT_FOUND).toResponse();
}`
    );
  }

  log_success("Done");
}
